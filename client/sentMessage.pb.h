// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sentMessage.proto

#ifndef PROTOBUF_sentMessage_2eproto__INCLUDED
#define PROTOBUF_sentMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sentMessage_2eproto();
void protobuf_AssignDesc_sentMessage_2eproto();
void protobuf_ShutdownFile_sentMessage_2eproto();

class DescribedMessage;

// ===================================================================

class DescribedMessage : public ::google::protobuf::Message {
 public:
  DescribedMessage();
  virtual ~DescribedMessage();

  DescribedMessage(const DescribedMessage& from);

  inline DescribedMessage& operator=(const DescribedMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DescribedMessage& default_instance();

  void Swap(DescribedMessage* other);

  // implements Message ----------------------------------------------

  DescribedMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DescribedMessage& from);
  void MergeFrom(const DescribedMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string full_name = 1;
  inline bool has_full_name() const;
  inline void clear_full_name();
  static const int kFullNameFieldNumber = 1;
  inline const ::std::string& full_name() const;
  inline void set_full_name(const ::std::string& value);
  inline void set_full_name(const char* value);
  inline void set_full_name(const char* value, size_t size);
  inline ::std::string* mutable_full_name();
  inline ::std::string* release_full_name();
  inline void set_allocated_full_name(::std::string* full_name);

  // required bytes message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional string debug_msg = 3;
  inline bool has_debug_msg() const;
  inline void clear_debug_msg();
  static const int kDebugMsgFieldNumber = 3;
  inline const ::std::string& debug_msg() const;
  inline void set_debug_msg(const ::std::string& value);
  inline void set_debug_msg(const char* value);
  inline void set_debug_msg(const char* value, size_t size);
  inline ::std::string* mutable_debug_msg();
  inline ::std::string* release_debug_msg();
  inline void set_allocated_debug_msg(::std::string* debug_msg);

  // @@protoc_insertion_point(class_scope:DescribedMessage)
 private:
  inline void set_has_full_name();
  inline void clear_has_full_name();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_debug_msg();
  inline void clear_has_debug_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* full_name_;
  ::std::string* message_;
  ::std::string* debug_msg_;
  friend void  protobuf_AddDesc_sentMessage_2eproto();
  friend void protobuf_AssignDesc_sentMessage_2eproto();
  friend void protobuf_ShutdownFile_sentMessage_2eproto();

  void InitAsDefaultInstance();
  static DescribedMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// DescribedMessage

// required string full_name = 1;
inline bool DescribedMessage::has_full_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DescribedMessage::set_has_full_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DescribedMessage::clear_has_full_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DescribedMessage::clear_full_name() {
  if (full_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    full_name_->clear();
  }
  clear_has_full_name();
}
inline const ::std::string& DescribedMessage::full_name() const {
  // @@protoc_insertion_point(field_get:DescribedMessage.full_name)
  return *full_name_;
}
inline void DescribedMessage::set_full_name(const ::std::string& value) {
  set_has_full_name();
  if (full_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    full_name_ = new ::std::string;
  }
  full_name_->assign(value);
  // @@protoc_insertion_point(field_set:DescribedMessage.full_name)
}
inline void DescribedMessage::set_full_name(const char* value) {
  set_has_full_name();
  if (full_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    full_name_ = new ::std::string;
  }
  full_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DescribedMessage.full_name)
}
inline void DescribedMessage::set_full_name(const char* value, size_t size) {
  set_has_full_name();
  if (full_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    full_name_ = new ::std::string;
  }
  full_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DescribedMessage.full_name)
}
inline ::std::string* DescribedMessage::mutable_full_name() {
  set_has_full_name();
  if (full_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    full_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DescribedMessage.full_name)
  return full_name_;
}
inline ::std::string* DescribedMessage::release_full_name() {
  clear_has_full_name();
  if (full_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = full_name_;
    full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DescribedMessage::set_allocated_full_name(::std::string* full_name) {
  if (full_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete full_name_;
  }
  if (full_name) {
    set_has_full_name();
    full_name_ = full_name;
  } else {
    clear_has_full_name();
    full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DescribedMessage.full_name)
}

// required bytes message = 2;
inline bool DescribedMessage::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DescribedMessage::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DescribedMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DescribedMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& DescribedMessage::message() const {
  // @@protoc_insertion_point(field_get:DescribedMessage.message)
  return *message_;
}
inline void DescribedMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:DescribedMessage.message)
}
inline void DescribedMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:DescribedMessage.message)
}
inline void DescribedMessage::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DescribedMessage.message)
}
inline ::std::string* DescribedMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DescribedMessage.message)
  return message_;
}
inline ::std::string* DescribedMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DescribedMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DescribedMessage.message)
}

// optional string debug_msg = 3;
inline bool DescribedMessage::has_debug_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DescribedMessage::set_has_debug_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DescribedMessage::clear_has_debug_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DescribedMessage::clear_debug_msg() {
  if (debug_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_msg_->clear();
  }
  clear_has_debug_msg();
}
inline const ::std::string& DescribedMessage::debug_msg() const {
  // @@protoc_insertion_point(field_get:DescribedMessage.debug_msg)
  return *debug_msg_;
}
inline void DescribedMessage::set_debug_msg(const ::std::string& value) {
  set_has_debug_msg();
  if (debug_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_msg_ = new ::std::string;
  }
  debug_msg_->assign(value);
  // @@protoc_insertion_point(field_set:DescribedMessage.debug_msg)
}
inline void DescribedMessage::set_debug_msg(const char* value) {
  set_has_debug_msg();
  if (debug_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_msg_ = new ::std::string;
  }
  debug_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:DescribedMessage.debug_msg)
}
inline void DescribedMessage::set_debug_msg(const char* value, size_t size) {
  set_has_debug_msg();
  if (debug_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_msg_ = new ::std::string;
  }
  debug_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DescribedMessage.debug_msg)
}
inline ::std::string* DescribedMessage::mutable_debug_msg() {
  set_has_debug_msg();
  if (debug_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DescribedMessage.debug_msg)
  return debug_msg_;
}
inline ::std::string* DescribedMessage::release_debug_msg() {
  clear_has_debug_msg();
  if (debug_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = debug_msg_;
    debug_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DescribedMessage::set_allocated_debug_msg(::std::string* debug_msg) {
  if (debug_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete debug_msg_;
  }
  if (debug_msg) {
    set_has_debug_msg();
    debug_msg_ = debug_msg;
  } else {
    clear_has_debug_msg();
    debug_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DescribedMessage.debug_msg)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sentMessage_2eproto__INCLUDED
